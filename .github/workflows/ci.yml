name: CI - Continuous Integration

on:
  pull_request:
    branches: [dev, main, 'release/*']
    types: [opened, synchronize, reopened]
  push:
    branches: [dev, main, 'release/*']

env:
  NODE_VERSION: '22.18.0'
  GO_VERSION: '1.24.6'

jobs:
  # Security Checks
  security-checks:
    name: Security & Dependency Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Node.js Security Audit (Frontend)
        run: |
          if [ -f "frontend/package.json" ]; then
            cd frontend
            npm audit --audit-level moderate
            echo "✅ Frontend dependencies security check completed"
          else
            echo "⚠️  Frontend package.json not found, skipping npm audit"
          fi
          
      - name: Node.js Security Audit (Contracts)
        run: |
          if [ -f "contracts/package.json" ]; then
            cd contracts
            npm audit --audit-level moderate
            echo "✅ Contracts dependencies security check completed"
          else
            echo "⚠️  Contracts package.json not found, skipping npm audit"
          fi
          
      - name: Go Security Scan (Backend)
        run: |
          if [ -f "backend/go.mod" ]; then
            cd backend
            go list -json -deps ./... | nancy sleuth
            echo "✅ Backend dependencies security check completed"
          else
            echo "⚠️  Backend go.mod not found, skipping Go security scan"
          fi
        continue-on-error: true
        
      - name: Check for Secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Smart Contracts Testing
  contracts-test:
    name: Smart Contracts Testing
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./contracts
    
    steps:
      - name: Placeholder
        run: echo "Smart Contracts testing will be implemented later"


  # Frontend Testing
  frontend-test:
    name: Frontend Testing & Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Placeholder
        run: echo "Frontend testing will be implemented later"


  # Backend Testing
  backend-test:
    name: Backend Testing
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - name: Placeholder
        run: echo "Backend testing will be implemented later"

  # Docker Build Testing
  docker-build-test:
    name: Docker Build Testing
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
      - name: Placeholder
        run: echo "Docker build testing will be implemented later"


  # Quality Gate
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [security-checks, contracts-test, frontend-test, backend-test, docker-build-test]
    if: always()
    
    steps:
      - name: Check Job Results
        run: |
          echo "=== CI/CD Pipeline Results Summary ==="
          echo "Security Checks: ${{ needs.security-checks.result }}"
          echo "Contracts Test: ${{ needs.contracts-test.result }}"
          echo "Frontend Test: ${{ needs.frontend-test.result }}"
          echo "Backend Test: ${{ needs.backend-test.result }}"
          echo "Docker Build Test: ${{ needs.docker-build-test.result }}"
          
      - name: Quality Gate Decision
        run: |
          if [[ "${{ needs.security-checks.result }}" == "success" && \
                "${{ needs.contracts-test.result }}" == "success" && \
                "${{ needs.frontend-test.result }}" == "success" && \
                "${{ needs.backend-test.result }}" == "success" && \
                "${{ needs.docker-build-test.result }}" == "success" ]]; then
            echo "✅ Quality Gate: PASSED"
            echo "All components have passed their tests. Ready for deployment."
            exit 0
          else
            echo "❌ Quality Gate: FAILED"
            echo "One or more components failed testing. Please check the logs above."
            exit 1
          fi